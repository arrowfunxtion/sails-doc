var fs = require('fs')
var helper = require('jsdoc/util/templateHelper');


exports.handlers = {
    parseBegin: function(e){
        env.conf.opts.template = './docdash-category'
    },
    parseComplete: function(e){
        var routesPath = e.sourcefiles.filter(function(s){ return s.indexOf('config/routes.js') > -1})[0]
        // var content = fs.readFileSync(routesPath);
        var content = require(routesPath)
        // console.log(content)


        let virtualDoc = {
            comment: '/**\n * @module AccountController\n * @category controllers\n * @help        :: See http://sailsjs.org/#!/documentation/concepts/Controllers\n */',
            kind: 'function',
            memberof: 'module:PegawaiController',
            description: 'Sails Routing autogenerated by jsdoc-sails-routes',
            name: 'customfunction',
            // category: ['models'],
            // categoryString: 'models',
            scope: 'inner',
            longname: 'module:CustomModel' }
        // e.doclets.push(virtualDoc)

        function makeControllerFormat(string){
            // return nameController
            return string.substr(0,1).toUpperCase() + string.substr(1) + 'Controller'
        }

        for(var route in content.routes){
            var routeDefinition = content.routes[route]
            // format route controller, action
            var controllerName = routeDefinition.controller 
                               ? makeControllerFormat(routeDefinition.controller)
                               : 'No Controller' ;
            var actionName = routeDefinition.action 
                           ? routeDefinition.action
                           : 'No Action'


            // format model
                controllerName = routeDefinition.model 
                               ? makeControllerFormat(routeDefinition.model)
                               : controllerName;
                actionName = routeDefinition.blueprint 
                           ? 'Blueprint.' + routeDefinition.blueprint : actionName

            // format string Controller.action 
                controllerName = typeof routeDefinition == 'string' 
                               ? routeDefinition.split('.')[0]
                               : controllerName;

                actionName = typeof routeDefinition == 'string'
                           ? routeDefinition.split('.')[1]
                           : actionName
    
            var viewName = ''
            // format only view 
                if(routeDefinition.view){
                    viewName = routeDefinition.view
                }

                // console.log(actionName, 'action name')

            // related controller action doc
            var relatedDocletControllerAction = e.doclets.filter(function(d){
                return d.name == actionName && d.meta.filename == controllerName + '.js'
            })[0]

            // related controller doc
            var relatedDocletControllerName = e.doclets.filter(function(d){
                return d.name == controllerName && d.meta.filename == controllerName + '.js'
            })[0]
            
            var description = relatedDocletControllerAction && relatedDocletControllerAction.description 
                            ? relatedDocletControllerAction.description 
                            : 'No description Found';

            var routeDoc = 
            {
                kind: 'module',
                description: description,
                name: route,
                controllerName: controllerName,
                controllerActionName: actionName,
                relatedControllerDocAction: relatedDocletControllerAction,
                relatedControllerDocName: relatedDocletControllerName,
                actionName: actionName,
                category: ['routes'],
                categoryString: 'routes',
                longname: 'module:' + route
            }
            if(viewName.length){
                routeDoc.viewName = viewName
            }
            e.doclets.push(routeDoc)
        }











        // Handle models property
        var modelsFiles = e.sourcefiles.filter(function(s){
            return s.indexOf('api/models') > -1
        })

        modelsFiles.forEach(function(modelpath, key){
            var modelDefinition = require(modelpath)
            var attributes = modelDefinition.attributes
            var splitted = modelpath.split('/')
            var filename = splitted[splitted.length - 1].split('.')[0]
            var memberof = e.doclets.filter(function(d){            
                return d.name == filename;
            })[0];

            


            for(var key in attributes){

                var docletAttribute = {
                    kind: 'model_attribute',
                    description: 'Property',
                    name: key,
                    longname: filename + ':' + key,
                }

                docletAttribute = Object.assign({}, docletAttribute, modelDefinition.attributes[key])
                if(memberof && memberof.longname){
                    docletAttribute.memberof = memberof.longname
                }
                // console.log('pushing ', docletAttribute, ' to ', filename )
                e.doclets.push(docletAttribute)                        
            }
        })
        
        

        // e.doclets = e.doclets.filter(function(d){return d.meta && d.meta.filename != 'routes.js'})
        // console.log(e.doclets[2])
        
    }
}